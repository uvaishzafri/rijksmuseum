// Mocks generated by Mockito 5.4.4 from annotations
// in rijksmuseum/test/museum_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:io' as _i2;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;
import 'package:rijksmuseum/models/tile_model.dart' as _i6;

import 'museum_bloc_test.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHttpClient_0 extends _i1.SmartFake implements _i2.HttpClient {
  _FakeHttpClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MockMuseumRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMockMuseumRepository extends _i1.Mock
    implements _i3.MockMuseumRepository {
  MockMockMuseumRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HttpClient get httpClient => (super.noSuchMethod(
        Invocation.getter(#httpClient),
        returnValue: _FakeHttpClient_0(
          this,
          Invocation.getter(#httpClient),
        ),
      ) as _i2.HttpClient);

  @override
  String get baseUrl => (super.noSuchMethod(
        Invocation.getter(#baseUrl),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#baseUrl),
        ),
      ) as String);

  @override
  _i5.Future<List<_i6.TileModel>> fetchTiles({
    int? p = 0,
    int? ps = 10,
    String? q = r'',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchTiles,
          [],
          {
            #p: p,
            #ps: ps,
            #q: q,
          },
        ),
        returnValue: _i5.Future<List<_i6.TileModel>>.value(<_i6.TileModel>[]),
      ) as _i5.Future<List<_i6.TileModel>>);
}
